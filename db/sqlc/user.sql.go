// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, full_name, password)
VALUES ($1, $2, $3, $4)
RETURNING username, email, full_name, password, created_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	FullName string `json:"full_name"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.FullName,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT username, email, full_name, password, created_at
FROM users
WHERE LOWER(email) = LOWER($1)
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT username, email, full_name, password, created_at
FROM users
WHERE LOWER(username) = LOWER($1)
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsernameOrEmail = `-- name: GetUserByUsernameOrEmail :one
SELECT username, email, full_name, password, created_at
FROM users
WHERE LOWER(username) = LOWER($1) OR LOWER(email) = LOWER($2)
LIMIT 1
`

type GetUserByUsernameOrEmailParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) GetUserByUsernameOrEmail(ctx context.Context, arg GetUserByUsernameOrEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsernameOrEmail, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
