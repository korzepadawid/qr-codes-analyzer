// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: redirect.sql

package db

import (
	"context"
	"time"
)

const createRedirect = `-- name: CreateRedirect :one
INSERT INTO redirects (qr_code_uuid, ipv4, isp, autonomous_sys, lat, lon, city, country)
VALUES ($1, $2, $3, $4, $5, $6,
        $7, $8)
RETURNING id, qr_code_uuid, ipv4, isp, autonomous_sys, lat, lon, city, country, created_at
`

type CreateRedirectParams struct {
	QrCodeUuid    string `json:"qr_code_uuid"`
	Ipv4          string `json:"ipv4"`
	Isp           string `json:"isp"`
	AutonomousSys string `json:"autonomous_sys"`
	Lat           string `json:"lat"`
	Lon           string `json:"lon"`
	City          string `json:"city"`
	Country       string `json:"country"`
}

func (q *Queries) CreateRedirect(ctx context.Context, arg CreateRedirectParams) (Redirect, error) {
	row := q.db.QueryRowContext(ctx, createRedirect,
		arg.QrCodeUuid,
		arg.Ipv4,
		arg.Isp,
		arg.AutonomousSys,
		arg.Lat,
		arg.Lon,
		arg.City,
		arg.Country,
	)
	var i Redirect
	err := row.Scan(
		&i.ID,
		&i.QrCodeUuid,
		&i.Ipv4,
		&i.Isp,
		&i.AutonomousSys,
		&i.Lat,
		&i.Lon,
		&i.City,
		&i.Country,
		&i.CreatedAt,
	)
	return i, err
}

const getQRCodeRedirectEntries = `-- name: GetQRCodeRedirectEntries :many
SELECT qc.uuid            AS "uuid",
       qc.redirection_url AS "url",
       qc.title           AS "title",
       r.ipv4             AS "ipv4",
       r.isp              AS "isp",
       r.autonomous_sys   AS "autonomous_sys",
       r.city             AS "city",
       r.lat              AS "lat",
       r.lon              AS "lon",
       r.country          AS "country",
       r.created_at       AS "date"
FROM qr_codes qc
         INNER JOIN redirects r on qc.uuid = r.qr_code_uuid
WHERE qc.uuid = $1
  AND qc.owner = $2
ORDER BY r.created_at DESC
`

type GetQRCodeRedirectEntriesParams struct {
	Uuid  string `json:"uuid"`
	Owner string `json:"owner"`
}

type GetQRCodeRedirectEntriesRow struct {
	Uuid          string    `json:"uuid"`
	Url           string    `json:"url"`
	Title         string    `json:"title"`
	Ipv4          string    `json:"ipv4"`
	Isp           string    `json:"isp"`
	AutonomousSys string    `json:"autonomous_sys"`
	City          string    `json:"city"`
	Lat           string    `json:"lat"`
	Lon           string    `json:"lon"`
	Country       string    `json:"country"`
	Date          time.Time `json:"date"`
}

func (q *Queries) GetQRCodeRedirectEntries(ctx context.Context, arg GetQRCodeRedirectEntriesParams) ([]GetQRCodeRedirectEntriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getQRCodeRedirectEntries, arg.Uuid, arg.Owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetQRCodeRedirectEntriesRow{}
	for rows.Next() {
		var i GetQRCodeRedirectEntriesRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Url,
			&i.Title,
			&i.Ipv4,
			&i.Isp,
			&i.AutonomousSys,
			&i.City,
			&i.Lat,
			&i.Lon,
			&i.Country,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
