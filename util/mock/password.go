// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/korzepadawid/encode-codes-analyzer/util (interfaces: PasswordService)

// Package mockpassword is a generated GoMock package.
package mockpassword

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPasswordService is a mock of PasswordService interface
type MockPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordServiceMockRecorder
}

// MockPasswordServiceMockRecorder is the mock recorder for MockPasswordService
type MockPasswordServiceMockRecorder struct {
	mock *MockPasswordService
}

// NewMockPasswordService creates a new mock instance
func NewMockPasswordService(ctrl *gomock.Controller) *MockPasswordService {
	mock := &MockPasswordService{ctrl: ctrl}
	mock.recorder = &MockPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPasswordService) EXPECT() *MockPasswordServiceMockRecorder {
	return m.recorder
}

// HashPassword mocks base method
func (m *MockPasswordService) HashPassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword
func (mr *MockPasswordServiceMockRecorder) HashPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockPasswordService)(nil).HashPassword), arg0)
}

// VerifyPassword mocks base method
func (m *MockPasswordService) VerifyPassword(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPassword indicates an expected call of VerifyPassword
func (mr *MockPasswordServiceMockRecorder) VerifyPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockPasswordService)(nil).VerifyPassword), arg0, arg1)
}
